<meta-runner name="Create Pull Requests">
  <description>Create Pull Requests</description>
  <settings>
    <parameters>
      <param name="ANGULAR_VERSION" value="13.3.0" />
      <param name="NODE_VERSION" value="14.20" />
      <param name="add-all-branches"><![CDATA[%add-feature-and-bugfix%
%add-release-hotfix%
%add-develop%]]></param>
      <param name="add-develop"><![CDATA[%exclude-master%
+:refs/heads/develop]]></param>
      <param name="add-feature-and-bugfix"><![CDATA[%exclude-master%
+:refs/heads/feature/*
+:refs/heads/bugfix/*]]></param>
      <param name="add-release-hotfix"><![CDATA[%exclude-master%
+:refs/heads/release/*
+:refs/heads/hotfix/*]]></param>
      <param name="bitbucket-token" value="ATBBzjFvtwthjfCajsLh78gu5xmTDB13ADC9" />
      <param name="bitbucket.restapi.respositories.slug" value="demo-app" />
      <param name="bitbucket.restapi.url" value="https://api.bitbucket.org/2.0" />
      <param name="bitbucket.restapi.url.access-token" value="ATCTT3xFfGN0tSStqgtj18WFCUtCQDTPP_coNdsLqh5MixaWLfSD6nqoNu_A3pKMFjvmNKyWquiMX3LweaAq1Slq-MMskWAKl5Sz1l0GECKDpnpqMMHz9Stlvx8QTHITCT3pdz7AfYAc0GeZQ_aKTk5MqOr26I9h2cG19RDzz6Uq4K32jlxual0=A76C3B12" />
      <param name="bitbucket.restapi.url.repositories.workspace" value="%bitbucket.restapi.url%/repositories/marcospcruz" />
      <param name="bitbucket.restapi.url.repositories.workspace.slug" value="%bitbucket.restapi.url.repositories.workspace%/demo-app" />
      <param name="bitbucket.restapi.url.repositories.workspace.slug.pullrequests" value="&quot;%bitbucket.restapi.url.repositories.workspace.slug%/pullrequests&quot;" />
      <param name="docker-registry" value="registry.docker-registry.svc.cluster.local:5000" />
      <param name="env.COMMIT.author" value="" />
      <param name="env.COMMIT.hash" value="" />
      <param name="env.git.branch.source" value="script-generated" />
      <param name="env.git.branch.source.type" value="-script-generated-" />
      <param name="env.git.branch.target" value="script-generated" />
      <param name="exclude-master" value="-:refs/heads/master" />
      <param name="repo-param" value="-DM2=file:///certs/client/.m2" />
      <param name="system.NPM_AUTH_TOKEN" value="credentialsJSON:d19bbaf4-e5bb-4795-bdd7-9805868934c3" spec="password display='hidden' readOnly='true' label='SPI'" />
    </parameters>
    <build-runners>
      <runner name="get commit details" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[echo "repository rest api url: %bitbucket.restapi.url.repositories.workspace.slug.pullrequests%"
echo "commit author: %dep.DemoApp_1CheckCommitSAuthorBuild.env.COMMIT.author%"
echo "source branch type: %dep.DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source.type%"
echo "source branch: %dep.DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source%"

COMMIT_USER="%dep.DemoApp_1CheckCommitSAuthorBuild.env.COMMIT.author%"
case "%dep.DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source.type%" in
    	"feature" ) 
    		TARGET_BRANCH="develop" 
            CURRENT_BRANCH="%dep.DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source%"
        ;;
        *)	
        	echo "ERROR: Invalid branch type"
        	exit 1
        ;;
esac
echo "target branch: ${TARGET_BRANCH}"
echo "##teamcity[setParameter name='env.git.branch.source' value='${CURRENT_BRANCH}']"
echo "##teamcity[setParameter name='env.git.branch.target' value='${TARGET_BRANCH}']"
echo "##teamcity[setParameter name='env.COMMIT.author' value='${COMMIT_USER}']"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="create pull request" type="python-runner">
        <parameters>
          <param name="command" value="script" />
          <param name="coverageArgs" value="--omit=*lib*" />
          <param name="envTool" value="none" />
          <param name="installToolPackage" value="true" />
          <param name="isCoverageEnabled" value="false" />
          <param name="isTestReportingEnabled" value="true" />
          <param name="poetryExecutable" value="poetry" />
          <param name="pythonVersion" value="python3" />
          <param name="scriptContent"><![CDATA[# This code sample uses the 'requests' library:
# http://docs.python-requests.org
import requests
import json

url = %bitbucket.restapi.url.repositories.workspace.slug.pullrequests%

headers = {
  "Accept": "application/json",
  "Content-Type": "application/json",
  "Authorization": "Bearer %bitbucket.restapi.url.access-token%"
}

payload = json.dumps({
  "title": "merge pull request",
  "description": "",
  "state": "OPEN",
  "author": {
    "display_name": "%env.COMMIT.author%",
    "type": "user",
    "nickname": "%env.COMMIT.author%",
    "account_id": ""
  },
  "source": {
    "repository": {
      "type": "repository"
    },
    "branch": {
      "name": "%env.git.branch.source%",
      "merge_strategies": [
        "merge_commit"
      ]
    }
  },
  "destination": {
    "repository": {
      "type": "repository"
    },
    "branch": {
      "name": "%env.git.branch.target%",
      "merge_strategies": [
        "merge_commit"
      ]
    }
  }
})

response = requests.request(
   "POST",
   url,
   data=payload,
   headers=headers
)
json_response=json.loads(response.text)
print(json.dumps(json_response, sort_keys=True, indent=4, separators=(",", ": ")))
print(response.status_code)
if 201 != response.status_code:
  exit(1)]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="virtualenvEnvName" value=".venv" />
          <param name="virtualenvFile" value="requirements.txt" />
        </parameters>
      </runner>
    </build-runners>
    <requirements />
  </settings>
</meta-runner>