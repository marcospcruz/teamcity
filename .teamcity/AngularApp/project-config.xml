<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="c55956e8-619c-4c82-b380-56864067ea38" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>Angular App</name>
  <parameters />
  <project-extensions>
    <extension id="PROJECT_EXT_2" type="CloudImage">
      <parameters>
        <param name="agentNamePrefix" value="docker-agent" />
        <param name="agent_pool_id" value="-2" />
        <param name="customPodTemplate"><![CDATA[apiVersion: v1
kind: Pod
metadata:
  name: teamcity-build-agent-2
  labels:
    app: teamcity-build-agent-2
  namespace: ci-cd  
spec:
  nodeSelector:
    kubernetes.io/hostname: rockpi-4b.local  
    # host: worker-1
    # host: master
  # hostNetwork: true
  securityContext:
    runAsUser: 0
    runAsGroup: 0
    fsGroup: 0  
  volumes:
  - name: agent-opt-temp
    emptyDir: {}  
  - name: dind-storage
    emptyDir: {}    
  # - name: docker-sock
    # hostPath:
      # path: "/var/run/docker.sock"
      # type: File
  - name: docker-directory
    hostPath:
      path: "/var/lib/docker"   
  - name: ca-certs
    secret:
      secretName: docker-registry/ca-secret
    # persistentVolumeClaim:
      # claimName: teamcity-agent-pvc-2
  - name: docker-config-json
    secret:
      secretName: docker-secret
      items:
      - key: config.json
        path: config.json      
  - name: ca-cert
    persistentVolumeClaim:
      claimName: ca-cert-teamcity-agent-pvc-2
  - name: ca-cert-client
    persistentVolumeClaim:
      claimName: ca-cert-client-teamcity-agent-pvc-2            
  - name: docker-agent-2-sock
    emptyDir: {}    
  containers:
    - name: teamcity-docker
      # image: docker:24.0.0-rc.1-dind
      image: docker:20.10.12-dind
      # command: ["/bin/sh"]
      # args: ["-c", "printenv; #OR WHATEVER COMMAND YOU WANT"]      
      securityContext:
        privileged: true
        runAsUser: 0
        #allowPrivilegeEscalation: true          
      # ports:
      #   - containerPort: 2376                        
      volumeMounts:
      - mountPath: /opt/buildagent/temp
        name: agent-opt-temp #nfs-build-agent-2      
      - mountPath: /certs/ca
        name: ca-cert
      - mountPath: /certs/client
        name: ca-cert-client              
      - name: dind-storage
        mountPath: /var/lib/docker
      - mountPath: /var/run        
        name: docker-agent-2-sock
      - name: ca-certs
        mountPath: "/etc/docker/certs.d/registry.docker-registry:5000"
        readOnly: true          
      # - mountPath: /var/run/docker.sock
      #   name: docker-sock
      #   readOnly: false
      env:
      - name: DOCKER_TLS_CERTDIR
        value: '/certs'
      - name: DOCKER_CERT_PATH
        value: '/certs/client'
      - name: DOCKER_TLS_VERIFY
        value: "1"
      - name: DOCKER_HOST
        value: "tcp://localhost:2376"
        # #allowPrivilegeEscalation: true          
    # - name: teamcity-docker-client    
    #   image: docker:latest  # Change this version tag with your server.
    #   imagePullPolicy: Always
    #   securityContext:
    #     privileged: true            
    #     runAsUser: 0
    #     #allowPrivilegeEscalation: true                  
    #   env:
    #   - name: DOCKER_IN_DOCKER
    #     value: start
    #   - name: DOCKER_TLS_CERTDIR
    #     value: /certs
    #   - name: DOCKER_VERSION
    #     value: 20.10.12
    #   - name: DOCKER_HOST
    #     value: tcp://localhost:2376
    #   volumeMounts:
    #   - mountPath: /certs/client
    #     name: ca-cert-client        
    #   - mountPath: /certs/ca
    #     name: ca-cert        
    #   - name: dind-storage
    #     mountPath: /var/lib/docker
    #   # - mountPath: /var/run/docker.sock        
    #   #   name: docker-agent-2-sock                
    - name: teamcity-build-agent-2
      image: jetbrains/teamcity-agent:2023.05.2  # Change this version tag with your server.
      imagePullPolicy: Always
      securityContext:
        privileged: true            
        runAsUser: 0
        #allowPrivilegeEscalation: true                  
      # args: ["--storage-driver", "overlay2", "--mtu", "1460"]
      ports:
      - containerPort: 2376          
      env:
      - name: DOCKER_TLS_VERIFY
        value: "1"
      - name: DOCKER_IN_DOCKER
        value: start
      - name: DOCKER_TLS_CERTDIR
        value: /certs
      - name: DOCKER_CERT_PATH
        value: '/certs/client'        
      - name: DOCKER_VERSION
        value: 20.10.12
      - name: SERVER_URL
        value: http://teamcity:8111    
      - name: DOCKER_HOST
        value: tcp://localhost:2376
      volumeMounts:
      - mountPath: /root/.docker/config.json
        subPath: config.json
        name: docker-config-json #nfs-build-agent-2
      - mountPath: /opt/buildagent/temp
        name: agent-opt-temp #nfs-build-agent-2
      - mountPath: /var/run        
        name: docker-agent-2-sock
      - mountPath: /certs/client
        name: ca-cert-client     
      - name: dind-storage
        mountPath: /var/lib/docker
      - name: ca-certs
        mountPath: "/etc/docker/certs.d/registry.docker-registry:5000"
        readOnly: true              
      # - mountPath: /var/run/docker.sock  
      #   name: nfs-build-agent-2    
      # - mountPath: /opt/buildagent/work 
      #   name: nfs-build-agent-2    
      # - mountPath: /opt/buildagent/tools 
      #   name: nfs-build-agent-2    
      # - mountPath: /opt/buildagent/plugins 
      #   name: nfs-build-agent-2    
      # - mountPath: /opt/buildagent/system       
      #   name: nfs-build-agent-2        
      # image: nicosingh/rpi-dind
      # args: ["--storage-driver", "overlay2", "--mtu", "1460"]
      # command: 
      # - service
      # - docker
      # - start

    # persistentVolumeClaim:
    #   claimName: teamcity-agent-pvc    
  # - name: nfs-build-agent
  #   persistentVolumeClaim:
  #     claimName: teamcity-agent-pvc-2
    # nfs:
    #   server: 192.168.65.13
    #   path: /mnt/HD/HD_a2/nas_storage/teamcity/buildAgent-2
    #   readOnly: no]]></param>
        <param name="imageDescription" value="Custom pod template: docker-agent" />
        <param name="imageInstanceLimit" value="9" />
        <param name="podTemplateMode" value="custom-pod-template" />
        <param name="profileId" value="kube-3" />
        <param name="source-id" value="docker-agent" />
      </parameters>
    </extension>
    <extension id="PROJECT_EXT_5" type="CloudImage">
      <parameters>
        <param name="agentNamePrefix" value="kubernetes-agent" />
        <param name="agent_pool_id" value="-2" />
        <param name="customPodTemplate"><![CDATA[apiVersion: v1
kind: Pod
spec:
  containers:
  - image: debian:latest
    imagePullPolicy: IfNotPresent
    name: deploy-pod
    command: |
    # Point to the internal API server hostname
    APISERVER=https://kubernetes.default.svc

	# Path to ServiceAccount token
	SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount

	# Read this Pod's namespace
	NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)

	# Read the ServiceAccount bearer token
	TOKEN=$(cat ${SERVICEACCOUNT}/token)

	# Reference the internal certificate authority (CA)
	CACERT=${SERVICEACCOUNT}/ca.crt

	# Explore the API with TOKEN
	curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${AP
    kubectl config set-cluster e2e --embed-certs --certificate-authority=$CACERT \
    kubectl cluster-info
    #kubectl \
    #--token "Authorization: Bearer ${TOKEN}" \]]></param>
        <param name="imageDescription" value="Custom pod template: kubernetes-agent" />
        <param name="imageInstanceLimit" value="6" />
        <param name="podTemplateMode" value="custom-pod-template" />
        <param name="profileId" value="kube-3" />
        <param name="source-id" value="kubernetes-agent" />
        <param name="sourceDeployment" value="" />
      </parameters>
    </extension>
    <extension id="kube-3" type="CloudProfile">
      <parameters>
        <param name="apiServerUrl" value="https://192.168.65.23:6443" />
        <param name="authStrategy" value="client-cert" />
        <param name="cloud-code" value="kube" />
        <param name="description" value="" />
        <param name="enabled" value="true" />
        <param name="name" value="kubernetes cluster" />
        <param name="next-hour" value="5" />
        <param name="profileId" value="kube-3" />
        <param name="profileInstanceLimit" value="5" />
        <param name="secure:clientCertData" value="credentialsJSON:814731c3-664c-4c77-a509-2619b67f49f1" />
        <param name="secure:clientKeyData" value="credentialsJSON:c8096d62-1887-4150-bfe9-ca04e5af3ee6" />
        <param name="system.cloud.profile_id" value="kube-3" />
        <param name="terminate-after-build" value="true" />
        <param name="terminate-idle-time" value="30" />
      </parameters>
    </extension>
  </project-extensions>
  <cleanup />
</project>

