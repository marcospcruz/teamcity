<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="93a67d4c-d726-4c22-840a-76199b68e2c0" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>kubernetes deploy</name>
  <description />
  <settings>
    <parameters />
    <build-runners>
      <runner id="RUNNER_9" name="download kubectl" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[if [ ! -f "/usr/bin/kubectl" ];then
	URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
	echo downloading kubectl from $URL
	curl -LO $URL
    ls -la
    echo moving kubectl to /usr/bin
    mv kubectl /usr/bin/kubectl -fv
fi
chmod 755 /usr/bin/kubectl
echo checking version: $(kubectl version)
#kubectl cluster-info]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_10" name="set cluster" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[rm ~/.kube -rf
CLIENT_KEY=$(pwd)/client-key.crt
CLIENT_CERT=$(pwd)/client-cert.crt
echo LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOExmOGV1RHBENXVlenp5a2FSTHlaVjNzZkdmWW9rVExwcVhzR1haQko4dm1ibGhDCmxwdkptMVFTK0hoSUx4clRYM1p0OGJnTGRqZVNlalVObnk2UFExeDZlcytiUVJvREFkVUV3aW1oQ01RNkVSVTgKckVkaVlFczlkNkFLeGhVMlBSQjZQeGZHTmlyc0c2UlZzdWRoT1F1VTB5UnpkZFA0b0cxV3NYRkZMOEJueEpOcQp0R3o2OFprU0xiYlFwaDdpVnNUaWlubUpYNVFtN2Y4ZS9RcHM4cS9WWXJkZVVJZ20vS1R0NURWZHNSLzBtdkpFCnVQVlkyRVRrdDFLWHVFV0pndTlVQ20zT2hrK1U1Q1c5WE10RXh3OTQ4WTdjeTczVjU2c0EvWnhzOHd5d291bjYKVWhEaHF3TjBpekpvZHlTa0xGaFBTc01LZmNwTFVSaHprTnJQMndJREFRQUJBb0lCQVFEUExpdWFQdldZdjJJQwpEN21aemZyZWorWTRkTkNaYVFpMmw5d0xWaUpoOURhU0JsalpjNkFqbGtyMW0rRFUyZ3ZQQUFsRW9Ca05XR3N6CnozRzM3Y1RVUDBZVGFaZkFnbmpRSE4ySmwzYklLc3VuWkZYaUdWWnNkcFdpM2hZbndwMzZGTEtDbHgyOEJWbE4KdVRVaFU4L3ozeW5xU0ZjdnRJOHExTEJtN0l5VnVTS1k1L1U3VXFYVG5oRFVIRG93aXl6ZmJCUFdpeFB6Zzk1bApnSmFCS3QyVWZQMzhTWEJPYlpRNnpXc2g5T1pNNXpjdFVnV0IzTTlaVlZMbTZnNlFjVkV3aFRENzk4Z2NiUWZOCjJDRjdndk5jZytTQ2FpTTE0RlJ4Nmh0blZ4azUwMDg4cjJ5Uzl1VTJxY08va3RQTFd3M09LdnNoMUNqUzFiSTEKRXVjRDdUTWhBb0dCQVBGQmFsU1N2K1pUTWlaQm41UzRpaXppSTdRMUZkeVpQYjIwSGlKQWJTV2NEZTNJUXUvSgpYWTVFVUlxYVIzd3cvUUhhdlV0WU5PSlZ1emcyT0JndkVqS0FpejY1VVZCMjM2MHpNY0duYnZQaDRrSDFONWN1ClRlcnZMS09MOHpraXBKamFXaUJvekJIcmpVK2tMOTNYZ3FJaWN3TmpZRVpPMXpEZWl4U2MxTWVUQW9HQkFQOXUKSy8yUU1KREJXV0s3SFlPWTBDOHRGSHNrQmpKOGJ0c2VZVWcvOWsyUElteXF4TlZqeERSWUpFbnkwUTlnZUFsQQpHTnZYZkx2TFhDSWJBQ0c0N1o3b3pRL0QrQUxyak9WbVc3RUswYTJqU2lwNTVFYkpMbnJlTm9xYTFRaHI3aXBJClVZRWIwai9RclJ6bVFRRG4zNHVLazlMM2R1ZkZIakpId2d0c0pmT1pBb0dCQUpUdk56OGlvUWtGVHk1QzBNczAKNlVnd0NxNlRIdjNpTkRWS1hsZnl3ZTYzMmZseTZhK3g5ZWwvenVEaHdVT3YwbUUwc2lzek51S0szbHNqVFpuUQpaVUY4RFhvWldWTjlMelJ6S0VKT3BMWTJPa0ZScXBIUDZoWWd0TVA1LzVyRUFpekNqMlQyalJSNi8rK3Nna2hIClpNUEcxSTNBNll3OTI2YTFtOUtMeHVlMUFvR0FNYnRwcFR6bHQ4bHRkZU9vbzI2bFdnb1U2c1RnMEFPYU1kK0EKWVdqU3M5Y2loTFhiRFJFWHFubGUxMmNIZlU3ekVCb0N2UXIvcGpDNkI0bnFSS2FVM1ZQR1dVTjJqbHIrVzh2SwpIblpVek5IMkpyOEV5eU53Z1V1eW90bnlrR2t6UGRoR3hqUjhneUJHRkZKZ1phUy95Wk41cEtHNTdQWmNJcjRGCjhlTmtvRUVDZ1lFQWwyNG1ScUNISkFlVWc2bnlVbkE0YVlKK0N5R3VmbTJDVVJtU01vM2RCQTNiTlgwWkhLQzgKcXl0VkhRTzU3cGRzSkd0ZGRCdVkxTzlEY2R3eXJ4OXdDbmg3NmVYTWFrME1XT0RTTmxIbDN3QXRwUE5MUGltRgpSQnZXdDNvWWRkei9GYzlQTVMyRmpBN25tMHhuUUV1ZTFLeGxHNFRpSzJSWlJ4TkZuaWRSVERzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=|base64 -d >$CLIENT_KEY
echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lIQ0JGYk5TR25pekFOQmdrcWhraUc5dzBCQVFzRkFEQVZNUk13RVFZRFZRUUQKRXdwcmRXSmxjbTVsZEdWek1CNFhEVEkwTURFd09UQTBNelF4T0ZvWERUSTFNREV3T0RBME16a3pPVm93TkRFWApNQlVHQTFVRUNoTU9jM2x6ZEdWdE9tMWhjM1JsY25NeEdUQVhCZ05WQkFNVEVHdDFZbVZ5Ym1WMFpYTXRZV1J0CmFXNHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEd3QveDY0T2tQbTU3UFBLUnAKRXZKbFhleDhaOWlpUk11bXBld1pka0VueStadVdFS1dtOG1iVkJMNGVFZ3ZHdE5mZG0zeHVBdDJONUo2TlEyZgpMbzlEWEhwNno1dEJHZ01CMVFUQ0thRUl4RG9SRlR5c1IySmdTejEzb0FyR0ZUWTlFSG8vRjhZMkt1d2JwRld5CjUyRTVDNVRUSkhOMTAvaWdiVmF4Y1VVdndHZkVrMnEwYlByeG1SSXR0dENtSHVKV3hPS0tlWWxmbENidC94NzkKQ216eXI5Vml0MTVRaUNiOHBPM2tOVjJ4SC9TYThrUzQ5VmpZUk9TM1VwZTRSWW1DNzFRS2JjNkdUNVRrSmIxYwp5MFRIRDNqeGp0ekx2ZFhucXdEOW5HenpETENpNmZwU0VPR3JBM1NMTW1oM0pLUXNXRTlLd3dwOXlrdFJHSE9RCjJzL2JBZ01CQUFHalZqQlVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0QKQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkREb0lTV2JIdU9yalRZTy9wenEzUEQ2Y09FVQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNDdUlTekl2VlVTSVNWT0Z6YlFTU25tK25hc0lzR1I5Zys3bGcxCjdjNW4vTzVTT2VPd3ljczRDRTdBTDR6RVNiaUxOWDZHL0dtUkQ5WTBrZnZpdnl2eTFsMEZYaTdLZ09neXdYQkMKZlc3aUlWV1ltNi9oZEppT1JQbWphS1JWNDhGbVRKRG84MFloNUh2TCtudU5LNXN5bzZyeWNwcDdjaGk1R1JUUQpKQlRCbys1SVVaSHpOcW13clRzK0EwVXhHMWp4SjVsVkVkZDROemxhRmZPVlBmTEZCZHIrK3dXZWt4QUY2ZTRjCkhCMEJrTzl5R2ZwYlRmbXE0Ull4eUtGeStjT1B0b1FQY0tjNEE2ODF2WjVkQ2QrclFOaHFVSzhQWWhUdlMrRFkKS3pjNm1jTzdobXBYQTFtTEo0YkhYTEI0STdiTGlweVhiQS9nNjNsNTdYM28rbXRaCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K|base64 -d >$CLIENT_CERT

# Point to the internal API server hostname https://192.168.65.23:6443
APISERVER=https://kubernetes.default.svc

# Path to ServiceAccount token
SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount

# Read this Pod's namespace
NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)

# Read the ServiceAccount bearer token
TOKEN=$(cat ${SERVICEACCOUNT}/token)

# Reference the internal certificate authority (CA)
CACERT=${SERVICEACCOUNT}/ca.crt

# Explore the API with TOKEN
#curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${AP
kubectl config set-cluster kubernetes \
--embed-certs=true \
--certificate-authority=$CACERT \
--server=$APISERVER
# set-context
kubectl config set-context kubernetes-admin@kubernetes \
--cluster=kubernetes \
--namespace=default \
--user=kubernetes-admin 
kubectl config use-context kubernetes-admin@kubernetes
kubectl config set-credentials kubernetes-admin --client-certificate=$CLIENT_CERT --embed=true
# config view
kubectl config get-contexts
kubectl config view
# cluster-info
kubectl cluster-info
#kubectl \
#--token "Authorization: Bearer ${TOKEN}" \]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="AngularApp_GitGithubComMarcospcruzAngularAppGitRefsHeadsMaster" />
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="TRIGGER_2" type="vcsTrigger">
        <parameters>
          <param name="branchFilter" value="+:*" />
          <param name="groupCheckinsByCommitter" value="true" />
          <param name="perCheckinTriggering" value="true" />
          <param name="quietPeriodMode" value="DO_NOT_USE" />
          <param name="watchChangesInDependencies" value="true" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <cleanup />
  </settings>
</build-type>

