<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="68bc3fc5-8144-4246-a9f3-b701b64e6e9e" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>7.Create Pull Requests</name>
  <description />
  <settings>
    <options>
      <option name="cleanBuild" value="true" />
      <option name="excludeDefaultBranchChanges" value="true" />
      <option name="showDependenciesChanges" value="true" />
    </options>
    <parameters />
    <build-runners>
      <runner id="RUNNER_43" name="Pull Request Route Decision" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[git remote set-url origin https://marcospcruz:%bitbucket-token%@bitbucket.org/marcospcruz/demo-app.git
git remote -v
git fetch --verbose
echo         
echo "triggered by %teamcity.build.triggeredBy%"
echo "repository rest api url: %bitbucket.restapi.url.repositories.workspace.slug.pullrequests%"
echo "commit author: %dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.COMMIT.author%"
echo "commit hash: %dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.COMMIT.hash%"
echo "source branch type: %dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source.type%"
echo "source branch: %dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source%"
CLOSE_SOURCE=false
COMMIT_HASH="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.COMMIT.hash%"
SOURCE_BRANCH="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source%"
COMMIT_USER="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.COMMIT.author%"
RELEASE_SUPPORT_VERSION="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.bitbucket.branch.release.support"
echo Build branch: %teamcity.build.branch%
BRANCH_TYPE="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.env.git.branch.source.type%"
echo "Processing branch type $BRANCH_TYPE"
case $BRANCH_TYPE in
    	"feature" ) 
    		TARGET_BRANCH="${RELEASE_SUPPORT_VERSION}" 
            CLOSE_SOURCE=false
        	;;
		"develop" ) 
    		#TARGET_BRANCH="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.bitbucket.branch.release.support%" 
            CLOSE_SOURCE=false
        	;;
    	"support" ) 
			if [ ! -z "$(echo %teamcity.build.branch%|grep  -E -i -w '(release|candidate)')" ]; then
				#TARGET_BRANCH="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.bitbucket.branch.release.support%" 
            	CLOSE_SOURCE=false
            fi
        	;;            
    	"release" ) 
    		TARGET_BRANCH="golden-source" 
            CLOSE_SOURCE=false
        	;;
            
        "HEAD")
    		TARGET_BRANCH="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.bitbucket.branch.release%" 
            PROJECT_VERSION="%dep.BitbucketMarcospcruzWorkspace_DemoApp_1CheckCommitSAuthorBuild.maven.project.version%" 
            echo "triggered from demo-app tag. Defining source using HEAD commit hash $COMMIT_HASH"
            RELEASE_CANDIDATE_TAG=$(git log ${COMMIT_HASH} --oneline|head -1|sed -r 's/(.+release\s)(%system.teamcity.projectName%-.+)/\2/g')
            echo "Release Candidate Tag: $(git tag --list|grep $RELEASE_CANDIDATE_TAG)"
            SOURCE_BRANCH="support/release-candidate-${PROJECT_VERSION}"
        	;;	        
		"golden-source")
        	echo "Skip creating pull-request"
            exit 0
        	;;
		"feature")
        	TARGET_BRANCH="support" 
            #echo "Skip creating pull-request"
            #exit 0
        	;;            
        *)	
        	echo "Branch type has no routes. Skipping pull request."
        	exit 0
            #echo skipping creating PR
            #TARGET_BRANCH=""
        ;;
esac
echo "target branch: ${TARGET_BRANCH}"
[ -z  ${TARGET_BRANCH} ] && echo Error: "No route from branch $SOURCE_BRANCH" && exit 0
git ls-remote --exit-code --heads origin $TARGET_BRANCH 
exit_code="$?"
if [ "0" -ne "$exit_code" ]; then
	echo "##teamcity[setParameter name='env.git.branch.target.skip' value='0']" 
    echo "Target branch ${TARGET_BRANCH} not found. Skipping pull request" 
	exit 0    
fi
echo "##teamcity[setParameter name='env.git.branch.source' value='${SOURCE_BRANCH}']"
echo "##teamcity[setParameter name='env.git.branch.target' value='${TARGET_BRANCH}']"
echo "##teamcity[setParameter name='env.COMMIT.author' value='${COMMIT_USER}']"
echo "##teamcity[setParameter name='env.git.pullrequest.close_source' value='${CLOSE_SOURCE}']"]]></param>
          <param name="teamcity.build.workingDir" value="%teamcity.build.branch%" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_42" name="create pull request" type="python-runner">
        <conditions>
          <does-not-contain name="teamcity.build.branch" value="master" />
          <does-not-equal name="env.git.branch.target.skip" value="0" />
          <does-not-contain name="env.git.branch.source" value="script-generated" />
        </conditions>
        <parameters>
          <param name="command" value="script" />
          <param name="coverageArgs" value="--omit=*lib*" />
          <param name="envTool" value="none" />
          <param name="installToolPackage" value="true" />
          <param name="isCoverageEnabled" value="false" />
          <param name="isTestReportingEnabled" value="true" />
          <param name="poetryExecutable" value="poetry" />
          <param name="pythonVersion" value="python3" />
          <param name="scriptContent"><![CDATA[# This code sample uses the 'requests' library:
# http://docs.python-requests.org
import requests
import json

url = %bitbucket.restapi.url.repositories.workspace.slug.pullrequests%

headers = {
  "Accept": "application/json",
  "Content-Type": "application/json",
  "Authorization": "Bearer %bitbucket.restapi.url.access-token%"
}

payload = json.dumps({
  "title": "merge pull request",
  "description": "",
  "state": "OPEN",
    "author": {
    "display_name": "%env.COMMIT.author%",
    "type": "user",
    "nickname": "%env.COMMIT.author%",
    "account_id": ""
  },
  "source": {
    "repository": {
      "type": "repository"
    },
    "branch": {
      "name": "%env.git.branch.source%",
      "merge_strategies": [
        "merge_commit"
      ]
    }
  },
  "destination": {
    "repository": {
      "type": "repository"
    },
    "branch": {
      "name": "%env.git.branch.target%",
      "merge_strategies": [
        "merge_commit"
      ]
    }
  }
})
print('Sending request:')
print(json.dumps(payload,ident=2))

response = requests.request(
   "POST",
   url,
   data=payload,
   headers=headers
)

print("response: "+json.loads(response.text,ident=2))
response_text=json.loads(response.text)



if 201 != response.status_code:
  error_message=response_text['error']['message']
  print("Http status code: ",response.status_code," - message: ",error_message)
  if 400 == response.status_code and error_message == %bitbucket.restapi.url.repositories.workspace.slug.pullrequests.error.accepted_message%:
    exit(0)
  exit(1)]]></param>
          <param name="teamcity.build.workingDir" value="%teamcity.build.branch%" />
          <param name="teamcity.step.mode" value="default" />
          <param name="virtualenvEnvName" value=".venv" />
          <param name="virtualenvFile" value="requirements.txt" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="DemoApp_HttpsMarcospcruzBitbucketOrgMarcospcruzDemoAppGitRefsHeadsMaster3" />
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="TRIGGER_17" type="vcsTrigger">
        <parameters>
          <param name="branchFilter"><![CDATA[+:%git.branch.feature%
+:%git.branch.develop%]]></param>
          <param name="groupCheckinsByCommitter" value="true" />
          <param name="perCheckinTriggering" value="true" />
          <param name="quietPeriodMode" value="DO_NOT_USE" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <dependencies>
      <depend-on sourceBuildTypeId="BitbucketMarcospcruzWorkspace_DemoApp_21UnitTest">
        <options>
          <option name="sync-revisions" value="false" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
      <depend-on sourceBuildTypeId="BitbucketMarcospcruzWorkspace_DemoApp_Develop">
        <options>
          <option name="sync-revisions" value="false" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

